#!/usr/bin/env bash

set -o pipefail -o errexit -o nounset -o errtrace

# This is a self-contained script, drop it onto the target machine independent
# of whatever repo this is currently living in. Transfers can be done via
# Airdrop, ssh, rsync, USB drive, etc.

# TODO: take out this safeguard once this script is idempotent
exit

# macOS, current as of Monterey

# TODO: cache the sudo authorization by asking once up-front, see discussions:
# https://serverfault.com/questions/266039/temporarily-increasing-sudos-timeout-for-the-duration-of-an-install-script
# https://gist.github.com/cowboy/3118588
# https://gist.github.com/cowboy/6733297

read -p "initial setup wizard complete (press ENTER to continue) " __
read -p "click prompt to finish setting up internet accounts (press ENTER to continue) " __

/usr/bin/env bash -c "$(curl --fail --silent --show-error --location https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew analytics off
sudo xcodebuild -license
xcode-select --install
# sudo /usr/sbin/DevToolsSecurity -enable
# sudo dscl . append /Groups/_developer GroupMembership $(whoami)
eval "$(/opt/homebrew/bin/brew shellenv)"
brew update
brew install mr vcsh

read -p "myrepos bootstrap url: " myrepo_url
vcsh clone "${myrepo_url}" mr
# TODO: ensure that this command gets run out of the home directory
mr update

brew install mas
read -p "Mac App Store username (Apple ID): " apple_id
mas signin "${apple_id}"
# TODO: may want to `mas lucky xcode` to get xcode pre-installed as many homebrew formula require a real xcode (not only cli tools) in order to install
# echo "sudo credentials required for running xcode-select on real xcode installation"
# sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
# TODO: use a script like this instead:
# https://github.com/rtrouton/rtrouton_scripts/blob/main/rtrouton_scripts/install_rosetta_on_apple_silicon/install_rosetta_on_apple_silicon.sh
/usr/sbin/softwareupdate --install-rosetta --agree-to-license
brew bundle 2>&1 | tee -a ~/Downloads/brew_bundle.log

# TODO: linux only
# sudo apt update
# sudo apt install -y gpg
# export APT_KEYRING="/etc/apt/keyrings"
# sudo mkdir -p "${APT_KEYRING}"
# sudo chmod 0755 "${APT_KEYRING}"
# wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo gpg --dearmor -o "${APT_KEYRING}/gierens.gpg"
# echo "deb [signed-by=${APT_KEYRING}/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list
# sudo chmod 644 "${APT_KEYRING}/gierens.gpg" /etc/apt/sources.list.d/gierens.list
# # `export -n` only for bash, so fail gracefully
# export -n APT_KEYRING || true
# unset APT_KEYRING
# bash VMware-Workstation-Full-*.bundle
# vmware-modconfig --console --install-all
# TODO: instead of above, had to follow instructions at: https://unix.stackexchange.com/questions/773558/vmware-vmmon-vmnet-17-5-1-and-linux-kernel-6-8-0-wont-compile
# flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
# sudo add-apt-repository --yes ppa:fish-shell/release-3
# sudo add-apt-repository --yes ppa:neovim-ppa/unstable
# sudo add-apt-repository --yes ppa:hickford/git-credential-oauth
# sudo apt update
# setting fish to default login shell can be buggy on many linux distros, so instead configure terminal emulator app to launch /usr/bin/fish directly
# TODO: ensure docker group exists
# sudo usermod -aG docker (whoami)
# (must log out and in again to persist the new group, but can also run on a per-shell basis until then:)
# newgrp docker
# TODO: only do this if debian-based distro, others don't have fdclone considerations
# apologies to fdclone...
# sudo ln -s /usr/bin/fdfind /usr/bin/fd
# TODO: parse .nix-apt-packages and `sudo apt install -y` each
# TODO: zeal/dash docsets: ~/.local/share/Zeal/Zeal/docsets/ or from flatpak: ~/.var/app/org.zealdocs.Zeal/data/Zeal/Zeal/docsets
# https://github.com/perroboc/godot-dash
# https://perroboc.github.io/godot-dash/godot-stable.xml
# (above hangs when attempting to Add Feed, so download manually...)
# wget -qO- https://perroboc.github.io/godot-dash/godot-stable.tgz | tar xz -C ~/.var/app/org.zealdocs.Zeal/data/Zeal/Zeal/docsets
# TODO: linux manpage zeal docset: https://github.com/zealdocs/zeal/issues/115
# TODO: only install lutris/steam on certain machines (not all)
# (for native steam, otherwise use lutris' steam for certain emulations)
# cp /var/lib/snapd/desktop/applications/steam_steam.desktop ~/.local/share/applications/
# vim ~/.local/share/applications/steam_steam.desktop
# (edit the first Exec= line to include this before the final substituted var %U: -forcedesktopscaling 2)
# (Lutris Steam game options: arguments: -forcedesktopscaling 2)
# (Lutris runner Wine options: Wine version: System, DPI: Enable DPI Scaling)
# (for MODO only: Wine Enable Virtual Desktop 3456x2160)
# (TODO: had to remove -cef-disable-gpu-compositing from lutris steam arguments?)
# cp /var/lib/flatpak/exports/share/applications/org.wezfurlong.wezterm.desktop ~/.local/share/applications/
# vim ~/.local/share/applications/org.wezfurlong.wezterm.desktop
# (edit the first Exec= line to include this before the final open-ended list of positional "--command=" args: --filesystem=host --socket=pulseaudio)
# TODO: https://httptoolkit.com/download/linux-deb/
# TODO: these are too out of date and spit out critical errors due to kernel
#       driver incompatibilities, had to download latest versions manually from:
#       https://www.virtualbox.org/wiki/Linux_Downloads
# - virtualbox
# - virtualbox-dkms
# - virtualbox-ext-pack
# - virtualbox-guest-additions-iso
# TODO: flatpak jadx doesn't play nice with apkleaks, launches the gui, but if
#       that gets fixed then do: sudo ln -s /var/lib/flatpak/exports/bin/com.github.skylot.jadx /usr/bin/jadx
# TODO: change keybinds to switch to exact numbered workspace N with super-N:
#       https://askubuntu.com/questions/1511378/is-it-possible-to-switch-between-workspaces-using-supernumber
#       and disable the default dock super-N keybinds:
#       https://askubuntu.com/questions/968103/disable-the-default-app-key-supernum-functionality-on-ubuntu-17-10-and-later
# gsettings set org.gnome.shell.extensions.dash-to-dock hot-keys false
# for i in (seq 1 9); gsettings set org.gnome.shell.keybindings switch-to-application-{$i} '[]'; end
# TODO: ensure wireshark group exists
# sudo usermod -aG wireshark (whoami)
# TODO: https://apktool.org/docs/install/
# TODO: https://support.1password.com/install-linux/
#       (note that some of the instructions overlap with the cli ones below)
# TODO: https://developer.1password.com/docs/cli/get-started/
# op plugin init openai
# TODO: no snap for ollama
# curl -fsSL https://ollama.com/install.sh | sh
# (best for 32GB RAM and RTX 3050 Mobile? consider :32b over :7b ?)
# ollama run deepseek-r1:7b
# curl -LsSf https://astral.sh/uv/install.sh | sh
# TODO: https://cdn.binary.ninja/installers/binaryninja_free_linux.zip
# (visudo: Defaults timestamp_type=global)
# TODO: https://my.hex-rays.com/dashboard/download-center/9.1/ida-pro
# TODO: copy idapro_*.hexlic to ~/.idapro
# vim ~/.local/share/applications/ida-pro-9.1.desktop
# /opt/ida-pro-9.1/idapyswitch
# TODO: https://www.newosxbook.com/tools/jtool2.html
# mkdir -p ~/.idapro/plugins
# bash ~/tmp/repos/github.com/blacktop/symbolicator/plugins/ida/install.sh
# TODO: manually build/install apfs-fuse from https://github.com/sgan81/apfs-fuse
# TODO: download latest deb (ipsw, NOT ipswd) from https://github.com/blacktop/ipsw/releases and install, do NOT use snap since sandboxing will cause it to be unable to use apfs-fuse
# dpkg -i ipsw*.deb

# [Desktop Entry]
# Type=Application
# Version=0.9.4
# Name=IDA Professional 9.1
# Comment=
# Icon=/opt/ida-pro-9.1/appico.png
# Exec=/opt/ida-pro-9.1/ida
# Terminal=false
# Path=/opt/ida-pro-9.1

# TODO: brew services
# TODO: according to https://www.naut.ca/blog/2020/08/26/ubuntu-vm-on-macos-with-libvirt-qemu/ may need to configure /opt/homebrew/etc/libvirt/qemu.conf with:
# echo 'security_driver = "none"' >> /usr/local/etc/libvirt/qemu.conf
# echo "dynamic_ownership = 0" >> /usr/local/etc/libvirt/qemu.conf
# echo "remember_owner = 0" >> /usr/local/etc/libvirt/qemu.conf
# brew services start libvirt
# TODO: ensure dialout group exists
# sudo usermod -aG dialout (whoami)

# fish-ssh-agent requires an existing ssh config dir
mkdir -p "${HOME}/.ssh/"{config.d,hosts.d,keys,control}
# TODO: apple silicon homebrew prefix is /opt/homebrew, intel prefix is /usr/local, should account for both, here and elsewhere in dotfiles
# TODO: on linux it's /usr/bin/fish
readonly fish_cmd="/opt/homebrew/bin/fish"
echo "sudo credentials required for adding fish to available shells"
echo "${fish_cmd}" | sudo tee -a /etc/shells
chsh -s "${fish_cmd}"
env "${fish_cmd}" -c "curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source; and fisher update"
# TODO: homebrew fish config?
# TODO: see sanity check changes in ~/.config/fish/conf.d/virtualfish-loader.fish
echo set --global --export OPENAI_API_KEY $(op item get "OpenAI Dev ENV Key (phoenix)" --vault "Private" --field "api key" --reveal) >> "${HOME}/.config/fish/local.fish"
echo set --global --export GOOGLEAI_API_KEY $(op item get "Google Gemini Dev ENV Key (phoenix)" --vault "Private" --field "api key" --reveal) >> "${HOME}/.config/fish/local.fish"

# TODO: deno?
mkdir -p ~/.config/fish/completions && ln -s ~/.asdf/completions/asdf.fish ~/.config/fish/completions
# TODO: consider moving from community rust plugin to https://github.com/code-lever/asdf-rust
echo erlang elixir rust python ruby nodejs opam lua golang java maven direnv | xargs -n1 asdf plugin-add

export GNUPGHOME="${ASDF_DIR:="$HOME/.asdf"}/keyrings/nodejs"
mkdir -p "${GNUPGHOME}"
chmod 0700 "${GNUPGHOME}"
~/.asdf/plugins/nodejs/bin/import-release-team-keyring
# `export -n` only for bash, so fail gracefully
export -n GNUPGHOME || true
unset GNUPGHOME

readonly py3="$(echo -n $(asdf latest python 3 | tail -n 1))"
readonly py2="$(echo -n $(asdf latest python 2 | tail -n 1))"
# if receiving a message on each command prompt about "unknown command: java",
# the latest temurin release may have only included static libs and not the
# full sdk, so manually install the previous version
readonly temurin="$(echo -n $(asdf list all java temurin | grep -v jre | tail -n 1))"
asdf install erlang latest
asdf install elixir latest
asdf install rust latest
asdf install python latest
asdf install python "${py2}"
asdf install ruby latest
asdf install nodejs latest
asdf install golang latest
asdf install java "${temurin}"
asdf install maven latest
asdf install direnv latest
asdf global elixir latest
asdf global rust latest
# asdf python allows for both py3 and py2 as a global default, will use py3 first then fallback to py2
asdf global python "${py3}" "${py2}"
asdf global ruby latest
# TODO: nomad-cli, nokogiri failed to install native extensions on apple silicon
asdf global nodejs latest
asdf global golang latest
asdf global java "${temurin}"
asdf global maven latest
asdf global direnv latest
asdf reshim
# TODO: cli "tools" shouldn't be installed every time on every language version, only once like how pipx does for python, what to do for the other languages?

rustup component add rust-analyzer

echo apkleaks black 'prospector[with_everything]' pyre-check youtube-dl proselint aws-shell doc2dash poetry restructuredtext_lint rstcheck httpie restview grip rst2rst yamllint 'ansible-lint[community]' flawfinder fb-idb mypy termdown openai yt-dlp rshell k2l | xargs -n1 pipx install
pipx install ansible --include-deps
pipx inject ansible paramiko
pipx install virtualfish --include-deps
env "${fish_cmd}" -c "vf install"
# TODO: move all tools above from pipx to uv, then remove pipx itself
uv tool install --force --python python3.12 aider-chat@latest

# TODO: manage these via asdf?
# opam init
# opam install flowtype

# TODO: this must run after Android Studio is launched and has installed its sdk
# "${HOME}/Library/Android/sdk/tools/bin/sdkmanager" --update

# TODO: after installing the NDK via sdkmanager, until v24 releases must edit
# the ndk-build script to support Rosetta x86 on Apple Silicon as seen on:
# https://stackoverflow.com/questions/69541831/unknown-host-cpu-architecture-arm64-android-ndk-siliconm1-apple-macbook-pro
# The bash shell running within fish also didn't have its $SHELL set correctly,
# so had to explicitly set it from within the ndk-build script:
# env SHELL=/bin/bash arch -x86_64 /bin/bash $DIR/build/ndk-build "$@"

# TODO: until apt fzf becomes more up-to-date, use golang to install
# this isn't placed in .default-golang-pkgs since it should only be temporary
go install github.com/junegunn/fzf@latest
# same goes for cheat
go install github.com/cheat/cheat/cmd/cheat@latest
asdf reshim

# TODO: attempt to fetch or push to a private github repo, then enter username and personal access token as the password

vim +PlugUpgrade +PlugUpdate +PlugInstall +PlugClean! +qall
"${HOME}/.tmux/plugins/tpm/bin/install_plugins"
"${HOME}/.tmux/plugins/tpm/bin/update_plugins all"
"${HOME}/.tmux/plugins/tpm/bin/clean_plugins"

# see: https://github.com/vagrant-libvirt/vagrant-libvirt/issues/497
# TODO: env CONFIGURE_ARGS="with-libvirt-lib=$(brew --prefix libvirt)/lib with-libvirt-include=$(brew --prefix libvirt)/include" vagrant plugin install vagrant-libvirt

# go list -m -f '{{.Dir}}' github.com/cheat/cheat@latest
# mkdir -p ~/.config/fish/completions && ln -s /TODO/SOME/PATH/TO/cheat/scripts/cheat.fish ~/.config/fish/completions
mkdir -p "${HOME}/.config/cheat/cheatsheets/"{community,personal}
git clone https://github.com/cheat/cheatsheets "${HOME}/.config/cheat/cheatsheets/community/"
# TODO: move this to dotfiles
curl --fail --silent --show-error --location --remote-name --remote-header-name --create-dirs --output-dir "${HOME}/.local/bin/" https://raw.githubusercontent.com/cheat/cheat/master/scripts/git/cheatsheets
chmod +x "${HOME}/.local/bin/cheatsheets"
cheatsheets pull

# TODO: add .emacs.d/bin/ to path?
vcsh run doom-emacs "${HOME}/.emacs.d/bin/doom upgrade --yes"
vcsh run doom-emacs "${HOME}/.emacs.d/bin/doom install --yes"
vcsh run doom-emacs "${HOME}/.emacs.d/bin/doom sync --yes"

# TODO: this appears to not be necessary anymore, the FiraMono Nerd Font is patched exactly necessary?
# TODO: instead make this font a formula based on:
# https://github.com/Homebrew/homebrew-cask-fonts/blob/master/Casks/font-powerline-symbols.rb
# and add to Brewfile under cask-fonts
# curl --fail --silent --show-error --location --create-dirs --output-dir "${HOME}/Library/Fonts/" --output "Symbols-2048-em Nerd Font Complete.ttf" https://github.com/ryanoasis/nerd-fonts/blob/master/src/glyphs/Symbols-2048-em%20Nerd%20Font%20Complete.ttf
# fc-cache -fr
# TODO: linux only
# see https://github.com/mcarvalho1/Simple-NerdFonts-Downloader for a more robust installation script
# mkdir -p "${HOME}/.local/share/fonts"
# wget --quiet https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/FiraMono.tar.xz -O /tmp/FiraMono.tar.xz
# tar -xf /tmp/FiraMono.tar.xz -C "${HOME}/.local/share/fonts"
# rm -f /tmp/FiraMono.tar.xz
# fc-cache -fr

# TODO: chatterino options, external tools, streamlink, preferred quality SOURCE, additional options:
# --twitch-low-latency "--twitch-api-header=Authorization=OAuth PASTEME"
# (aquire the PASTEME auth token via logged-in web browser dev tools: document.cookie.split("; ").find(item=>item.startsWith("auth-token="))?.split("=")[1] ; after `allow paste`)

# TODO: if this is a fresh install, restore ~/{Downloads,Private,tmp} from backup
# TODO: if this is a fresh install, restore ~/{.tmuxinator} from backup

# note that the dotfiles' .tigrc was acquired from this repo, but should
# probably be moved into mr/vcsh as a symlink at some point...
# https://github.com/ninjabreakbot/tig-gruvbox

# TODO: must edit /etc/pam.d/sudo to add these lines to the top:
# auth optional /opt/homebrew/lib/pam/pam_reattach.so
# auth sufficient pam_tid.so

gh auth login
gh extension install github/gh-copilot

# defaults

# defaults domains | tr ',' '\n' | grep -i "<appname>"
# defaults read <domain>
# (may have to manually set a pref in the UI then come back to see its key exist)
# defaults find <term>
# defaults read-type <domain> <key>
# defaults write <domain> <key> <type-flag> <value>
# defaults delete <domain> <key>

# General
# appearance: dark
# show scroll bars: when scrolling
# click in the scroll bar to: jump to the spot that's clicked
# prefer tabs: always
# close windows when quitting an app: uncheck

# Desktop & Screen Saver
# Start Screen Saver after 5 minutes
# Monterey
# Alternatively, install the Aerial Screen Saver: <https://github.com/JohnCoates/Aerial>
# Hot Corners:
#   Top Left: Launchpad
#   Top Right: Desktop (Notification Center is easily also reached by clicking Date here)
#   Bottom Left: Start Screen Saver
#   Bottom Right: Quick Note

# Dock & Menu Bar
# magnification, dragged near the ":"
# minimize windows using: scale effect
# automatically hide and show the dock
# might want to move almost everything from the menu bar to control center?
# (?) Minimize windows into application icon

# Mission Control
# uncheck Automatically rearrange Spaces

# Siri
# uncheck Listen for "Hey Siri"

# Language & Region
# add any currently learning
# Advanced
# First day of week: Monday

# Users & Groups
# Change avatar image
# Login Options
# (?) Display login window as: Name and password

# Accessibility
# pointer control: mouse & trackpad: trackpad options: enable dragging with three finger drag
# zoom: check use scroll gesture with modifier keys to zoom: ^ Control
# Display
# Cursor size: halfway between the first two ticks

# Extensions
# Share Menu
# check: Add to Dropover, Add to Things, Telegram, Tweetbot, Twitter

# Security & Privacy
# Require password 5 seconds after sleep or screen saver begins
# Show a message when the screen is locked: "Property of X. If found, please call ###-###-#### for reward."
# Use your Apple Watch to unlock apps and your Mac
# Allow apps downloaded from: App Store and identified developers
# FileVault on
# Firewall on
# Enable stealth mode

# Sound
# sound effects: play feedback when volume is changed

# Keyboard
# Key Repeat: Fast (furthest to right)
# Delay Until Repeat: Short (furthest to right)
# Text: uncheck all of: Correct spelling automatically, Captialize words automatically, Use smart quotes and dashes

# Trackpad
# point and click: tap to click
# more gestures: swipe between pages, app expose

# Displays
# Night Shift: Schedule: Sunset to Sunrise

# Control Center
# Hearing: Show in Control Center
# Spotlight: Don't Show
# Siri: Don't Show
