[user]
    name = Marco Chomut
    email = marco.chomut@gmail.com

[color]
    ui = auto
    diff = auto
    status = auto
    branch = auto
    interactive = auto

[core]
    # http://stackoverflow.com/questions/136178/git-diff-handling-long-lines
    # For seeing color (via control chars), but not interpreting others:
    # TODO: check if diff-so-fancy exists before defaulting to it
    pager = diff-so-fancy | less --tabs=4 --RAW-CONTROL-CHARS --quit-if-one-screen --no-init
    # excludesfile defaults to $HOME/.config/git/ignore
    editor = nvim

[merge]
    conflictstyle = diff3
    ff = false
    tool = fugitive

[mergetool "fugitive"]
	cmd = nvim -f -c \"Gdiffsplit!\" \"$MERGED\"

[credential]
    # TODO: change this based on OS
    helper = osxkeychain

[help]
    autocorrect = true

[rerere]
    autoupdate = true
    enabled = true

[pull]
    rebase = false

[push]
    default = current

[alias]
    st = status --short --branch
    wtf = !git-wtf
    # div = divergence

    aa = add --all
    stage = add -u
    unstage = reset HEAD --

    edit = !vim `git ls-files -m`

    d = diff --ignore-space-at-eol --ignore-space-change
    dc = !git d --cached
    stats = diff --stat

    ci = commit
    ca = commit -a -m
    # --reuse-message or --no-edit amend alias?
    amend = commit --amend --reedit-message HEAD --
    credit = commit --amend --author "$1 <$2>" -c HEAD --

    br = branch
    latest = for-each-ref --count=10 --sort=-committerdate --format='%(committerdate:short) %(refname:short)'
    co = checkout

    it = !git init && git commit --allow-empty -m \"Hello world\"
    f = fetch --all --prune
    pullff = pull --ff-only
    pullr = rebase --rebase-merges
    down = !git pullr
    up = push
    noff = merge --no-ff
    # push --tags
    # TODO: shortcut for "co develop, pullr, co feature/<foo>, rebase develop", but replaces last step with "merge develop" if branch has ever been pushed
    # TODO: shortcut for "stash, co develop, pullr", then: "co feature/<foo>, stash pop"

    undo = reset --soft HEAD~1 --

    count = shortlog -sn
    # --no-merges
    # hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short --all
    hist = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    tagcommit = !sh -c 'git rev-list $0 | head -n 1'
    brcleanup = !sh -c 'git branch --merged | grep -v "\\*" | xargs -n 1 git branch --delete'
    # for quickly reviewing a branch/PR's changes against what it diverged from
    # files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")
    # stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
    # (will also want a heatmap script for identifying file change frequency)
    # review = !vim -p $(git files) +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"
    # reviewone = !vim -p +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"
    # todo = !git diff master... | rg -C 5 TODO
    # todo-commit = !git diff --cached | rg -C 5 TODO
    # squash-all = !git reset $(git commit-tree HEAD^{tree} -m "${1?Please enter a message}")

    type = cat-file -t
    dump = cat-file -p

    serve = daemon --reuseaddr --base-path=. --export-all --verbose

[github]
    user = Pewpewarrows

[include]
    path = .gitconfig.local

# TODO: push.default current or tracking

[init]
    defaultBranch = main
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
